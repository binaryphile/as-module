#!/usr/bin/env bash
# shebang for syntax detection, not a command

declare -Ag _modules_

shopt -s expand_aliases
alias _args_='(( $# ))'
alias _to_args_='set --'

module_already_loaded () {
  declare -Ag _modules_
  [[ -v _modules_[${BASH_SOURCE[1]}] ]]
}

_blank_ () {
  [[ -z ${1:-} ]]
}

_defined_ () {
  [[ -v $1 ]]
}

_functions_ () {
  env -i bash <<END
    shopt -s expand_aliases
    alias source=:
    \\source $1 &>/dev/null
    compgen -A function;:
END
}

_in_ () {
  [[ $IFS$1$IFS == *"$IFS$2$IFS"* ]]
}

_pop_ () {
  local -n ref1_=$1
  local ref2_=${2:-}

  _present_ $ref2_ && printf -v $ref2_ %s "${ref1_[-1]}"
  unset -v $1[-1]
}

_present_ () {
  [[ -n ${1:-} ]]
}

_push_ () {
  local -n ref_=$2

  ref_+=( "$1" )
}

{ _args_ && _blank_ $1 ;} && return

! _args_ && _to_args_ ${BASH_SOURCE[1]}

{ _present_ ${BASH_SOURCE[1]:-} && [[ ${BASH_SOURCE[1]##*/} != module ]] ;} && {
  { _defined_ _ancestors_ && _in_ "${_ancestors_[*]}" ${BASH_SOURCE[1]} ;} && return
  _push_ ${BASH_SOURCE[1]} _ancestors_
}

for _file_; do
  _defined_ _modules_[$_file_] && continue

  _module_=${_file_##*/}
  _module_=${_module_%.*}

  _push_ "$(alias)" _aliases_
  unalias -a

  _functions_=$(_functions_ $_file_)

  for _function_ in $_functions_; do
    alias $_function_=$_module_.$_function_
  done

  _push_ $_file_ _files_
  _push_ "$_functions_" _funcs_

  source $_file_

  _pop_ _files_ _file_
  _pop_ _funcs_ _functions_

  _modules_[$_file_]=''

  for _function_ in $_functions_; do
    unalias $_function_
  done

  eval "${_aliases_[-1]}"
  _pop_ _aliases_
done

unalias _args_
unalias _to_args_
unset -f _blank_
unset -f _defined_
unset -f _in_
unset -f _push_
unset -v _file_
unset -v _function_
unset -v _functions_
unset -v _module_
[[ -v BASH_SOURCE[1] && ${BASH_SOURCE[1]##*/} != module ]] && unset -v _ancestors_[-1]
